{"version":3,"sources":["yourname.js","App.js","index.js"],"names":["fullName","a","names","split","japaneseNames","i","length","getJapaneseName","push","name","searchWikipediaForName","articlesWithName","getJapaneseTitles","articlesWithJapaneseTitles","extractJapaneseNames","japaneseNamesFreq","getNameFrequency","enCount","jaCount","Object","keys","enName","articles","fetchArticlesFromWikipedia","first500","totalArticles","query","searchinfo","totalhits","fetches","offset","Promise","all","concat","forEach","p","search","searchWikipedia","list","srlimit","srsearch","sroffset","searchParams","config","action","format","namespace","entries","map","c","join","url","fetch","then","r","json","pageids","pageid","promises","fetchLanguagesFromWikipedia","slice","results","pages","values","japaneseArticles","page","langlinks","id","ja","article","en","title","snippet","DOMParser","parseFromString","body","textContent","langCodes","prop","lllimit","lllang","toLowerCase","enNameIndex","indexOf","jaName","data","freqs","arr","v","getFrequency","e","cleanName","articlesMap","d","freqList","freq","sort","b","replace","trim","getJapaneseNames","default_data","theme","createTheme","palette","primary","main","accent","link","secondary","background","paper","dark","separators","App","React","setData","spelling","selected","setSelected","timeout","lastInput","handleSelectedChange","update","columns","field","headerName","flex","width","sortable","renderCell","params","Link","href","value","sx","color","textDecorationColor","rows","ThemeProvider","Container","className","textAlign","Box","component","pt","Typography","variant","gutterBottom","style","maxWidth","TextField","fullWidth","onChange","event","timeStamp","processInputAfterMs","clearTimeout","setTimeout","dataPromise","target","n","label","placeholder","backgroundColor","borderColor","Stack","my","flexWrap","direction","justifyContent","alignItems","Card","minWidth","m","CardContent","fontSize","mb","mt","align","filter","Paper","border","Toolbar","display","py","gap","FormControl","Select","MenuItem","borderTop","fill","DataGrid","pageSize","rowHeight","autoHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+bAIA,WAAgCA,GAAhC,mBAAAC,EAAA,sDACUC,EAAQF,EAASG,MAAM,MACvBC,EAAgB,GACbC,EAAI,EAHjB,YAGoBA,EAAIH,EAAMI,QAH9B,6BAIQF,EAJR,SAIiCG,EAAgBL,EAAMG,IAJvD,wBAIsBG,KAJtB,uBAGsCH,IAHtC,gDAMWD,GANX,6C,+BAceG,E,8EAAf,WAA+BE,GAA/B,qBAAAR,EAAA,sEACmCS,EAAuBD,GAD1D,cACUE,EADV,gBAE6CC,EAAkBD,GAF/D,cAEUE,EAFV,OAGUT,EAAgBU,EAAqBL,EAAMI,GAC3CE,EAAoBC,EAAiBZ,GAJ/C,kBAMW,CACHa,QAASN,EAAiBL,OAC1BY,QAASC,OAAOC,KAAKP,GAA4BP,OACjDJ,MAAOa,EACPM,OAAQZ,IAVhB,4C,+BAkBeC,E,8EAAf,WAAsCD,GAAtC,uBAAAR,EAAA,6DACUqB,EAAW,GADrB,SAG2BC,EAA2Bd,EAAM,GAH5D,OAOI,IAJMe,EAHV,OAIUC,EAAgBD,EAASE,MAAMC,WAAWC,UAE1CC,EAAU,GACPC,EAAS,IAAKA,EAASL,GAAiBK,EAAS,IAAOA,GAAU,IACvED,EAAQrB,KAAKe,EAA2Bd,EAAMqB,IARtD,gBAU0BC,QAAQC,IAAIH,GAVtC,qBAWYI,OAAO,CAACT,IAAWU,SAAQ,SAACC,GAAD,OAAOb,EAASd,KAAT,MAAAc,EAAQ,YAASa,EAAET,MAAMU,YAXvE,kBAYWd,GAZX,6C,sBAoBA,SAASC,EAA2Bd,EAAMqB,GACtC,OAAOO,EAAgB,CACnBC,KAAM,SACNC,QAAS,IACTC,SAAS,WAAD,OAAa/B,GACrBgC,SAAUX,I,SAQHO,E,8EAAf,WAA+BK,GAA/B,mBAAAzC,EAAA,6DACU0C,EADV,aACqBC,OAAQ,QAASC,OAAQ,OAAQC,UAAW,GAAMJ,GAC7DhB,EAAQP,OAAO4B,QAAQJ,GACxBK,KAAI,SAACC,GAAD,OAAOA,EAAEC,KAAK,QAClBA,KAAK,KACJC,EALV,sDAK+DzB,GAL/D,SAMiB0B,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAAOA,EAAEC,UAN1C,oF,+BAae3C,E,8EAAf,WAAiCU,GAAjC,yBAAArB,EAAA,sDAII,IAHMuD,EAAUlC,EAAS0B,KAAI,SAAC/C,GAAD,OAAOA,EAAEwD,UAEhCC,EAAW,GACRrD,EAAI,EAAGA,EAAImD,EAAQlD,OAAQD,GAAK,GACrCqD,EAASlD,KAAKmD,EAA4BH,EAAQI,MAAMvD,EAAGA,EAAI,IAAI6C,KAAK,KAAM,OALtF,gBAO0BnB,QAAQC,IAAI0B,GAPtC,cAOUG,EAPV,OAQUC,EAAQ,GACdD,EAAQ3B,SAAQ,SAACC,GAAD,OAAO2B,EAAMtD,KAAN,MAAAsD,EAAK,YAAS3C,OAAO4C,OAAO5B,EAAET,MAAMoC,YAErDE,EAAmB,GACzBF,EAAM5B,SAAQ,SAAC+B,GACPA,EAAKC,YAAWF,EAAiBC,EAAKR,QAAU,CAAEU,GAAIF,EAAKR,OAAQW,GAAIH,EAAKC,UAAU,GAAG,UAGjG5C,EAASY,SAAQ,SAACmC,GACd,IACU,EADJJ,EAAOD,EAAiBK,EAAQZ,QAClCQ,IACAA,EAAKK,GAAKD,EAAQE,MAClBN,EAAKO,QAAL,WAAe,IAAIC,WAAYC,gBAAgBL,EAAQG,QAAS,aAAaG,KAAKC,mBAAlF,QAAiG,OApB7G,kBAuBWZ,GAvBX,6C,sBA+BA,SAASL,EAA4BH,EAASqB,GAC1C,OAAOxC,EAAgB,CACnByC,KAAM,YACNC,QAAS,IACTC,OAAQH,EACRrB,YAQR,SAAS1C,EAAqBL,EAAMa,GAChCb,EAAOA,EAAKwE,cACZ,IAAM/E,EAAQ,GAMd,OALAiB,OAAO4C,OAAOzC,GAAUY,SAAQ,SAACmC,GAC7B,IAAMa,EAAcb,EAAQC,GAAGW,cAAc9E,MAAM,OAAOgF,QAAQ1E,GAC5D2E,EAASf,EAAQD,GAAGjE,MAAM,UAAK+E,GACjCE,GAAQlF,EAAMM,KAAK,CAAEC,KAAM2E,EAAQf,eAEpCnE,EAOX,SAASc,EAAiBqE,GACtB,IACMC,EAuBV,SAAsBC,GAClB,IAAMD,EAAQ,GAEd,OADAC,EAAIrD,SAAQ,SAACsD,GAAD,aAAQF,EAAME,IAAK,UAACF,EAAME,UAAP,QAAa,GAAK,KAC1CF,EA1BOG,CADAJ,EAAKrC,KAAI,SAAC0C,GAAD,OAAOC,EAAUD,EAAEjF,UAEpCmF,EAAc,GACpBP,EAAKnD,SAAQ,SAAC2D,GACV,IAAMpF,EAAOkF,EAAUE,EAAEpF,MACpBmF,EAAYnF,KAAOmF,EAAYnF,GAAQ,IAC5CmF,EAAYnF,GAAMD,KAAKqF,EAAExB,YAE7B,IAAMyB,EAAW3E,OAAO4B,QAAQuC,GAAOtC,KAAI,mCAAEvC,EAAF,WAAmB,CAAEA,OAAMsF,KAA3B,KAAiCzE,SAAUsE,EAAYnF,OAElG,OADAqF,EAASE,MAAK,SAAC/F,EAAGgG,GAAJ,OAAUA,EAAEF,KAAO9F,EAAE8F,QAC5BD,EAGX,SAASH,EAAUlF,GACf,OAAOA,EACFyF,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBC,OAaMC,M,4DCtJTC,EAAe,CACjB,CAAEnG,MAAO,CAAC,CAAEO,KAAM,OAAQsF,KAAM,EAAGzE,SAAU,MAC7C,CAAEpB,MAAO,CAAC,CAAEO,KAAM,OAAQsF,KAAM,EAAGzE,SAAU,OAG3CgF,EAAQC,YAAY,CACtBC,QAAS,CACLC,QAAS,CAAEC,KAAM,OAAQC,OAAQ,qBAAsBC,KAAM,sBAC7DC,UAAW,CAAEH,KAAM,QACnBI,WAAY,CACRJ,KAAM,OACNK,MAAO,OACPC,KAAM,OACNC,WAAY,WAmNTC,MA9Mf,WAAgB,IAAD,MACX,EAAwBC,WAAed,GAAvC,mBAAOhB,EAAP,KAAa+B,EAAb,KACA,EAAgCD,WAAe,CAAE1G,KAAM,GAAI4G,SAAU,KAArE,mBAAOC,EAAP,KAAiBC,EAAjB,KAIIC,EAAU,EACVC,EAAY,EAoBVC,EAAuB,SAACC,GAC1BJ,EAAY,2BAAKD,GAAaK,KAI5BC,EAAU,CACZ,CAAEC,MAAO,KAAMC,WAAY,IAAKC,KAAM,EAAGC,MAAO,IAChD,CAAEH,MAAO,KAAMC,WAAY,WAAYC,KAAM,GAC7C,CAAEF,MAAO,KAAMC,WAAY,UAAWC,KAAM,GAC5C,CACIF,MAAO,OACPC,WAAY,YACZC,KAAM,EACNE,UAAU,EACVC,WAAY,SAACC,GAAD,OACR,cAACC,EAAA,EAAD,CACIC,KAAI,0CAAqCF,EAAOG,OAChDC,GAAI,CAAEC,MAAO,eAAgBC,oBAAqB,sBAFtD,qBAWNC,EAAI,oBACNrD,EAAKiC,EAAS7G,MAAQ,GAAGP,MAAMoH,EAASD,UAAY,UAD9C,aACN,EAAwD/F,SAAS0B,KAAI,SAACM,EAAGjD,GAAJ,mBAAC,eAC/DiD,GAD8D,IAEjEa,GAAI9D,EAAI,EACRuG,KAAMtD,EAAEa,eAJN,QAKC,GAEX,OACI,cAACwE,EAAA,EAAD,CAAerC,MAAOA,EAAtB,SACI,eAACsC,EAAA,EAAD,CAAWC,UAAU,MAAMN,GAAI,CAAEO,UAAW,UAA5C,UACI,cAACC,EAAA,EAAD,CAAKC,UAAU,SAAST,GAAI,CAAEU,GAAI,MAAOT,MAAO,kBAAhD,SACI,cAACU,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACJ,UAAU,KAAhD,qCAIJ,eAACJ,EAAA,EAAD,CAAWI,UAAU,UAAUK,MAAO,CAAEC,SAAU,UAAlD,UACI,cAACC,EAAA,EAAD,CACIV,UAAU,SACVW,WAAS,EACTC,SAhEpB,SAA2BC,IAClBA,EAAMC,UAAYlC,GAAa,IAAOmC,IACvCC,aAAarC,GACbA,EAAUsC,WAAU,sBAAC,8BAAA7J,EAAA,6DACX8J,EAAc3D,EAAiBsD,EAAMM,OAAO1B,OAClDlB,EACIsC,EAAMM,OAAO1B,MACRnI,MAAM,MACN6C,KAAI,SAACiH,GAAD,MAAQ,CAAE/J,MAAO,CAAC,CAAEO,KAAM,aAAcsF,KAAM,EAAGzE,SAAU,UALvD,SAOEyI,EAPF,OAOX1E,EAPW,OAQjB+B,EAAQ/B,GACRkC,EAAY,CAAE9G,KAAM,EAAG4G,SAAU,IAThB,2CAND,MAkBxBI,EAAYiC,EAAMC,WAkDFO,MAAM,YACNC,YAAY,WACZ3B,MAAM,YACND,GAAI,CACA,yBAA0B,CAAE6B,gBAAiB,mBAC7C,wBAAyB,CAAE5B,MAAO,kBAClC,mDAAoD,CAAE6B,YAAa,qBAG3E,cAACC,EAAA,EAAD,CACI/B,GAAI,CAAEgC,GAAI,MAAOC,SAAU,QAC3BC,UAAU,MACVC,eAAe,eACfC,WAAW,aAJf,SAMKtF,EAAKrC,KAAI,SAAC6C,GAAD,qBACN,cAAC+E,EAAA,EAAD,CAAMrC,GAAI,CAAEsC,SAAU,OAAQT,gBAAiB,iBAAkBU,EAAG,OAApE,SACI,eAACC,EAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACJ,UAAU,KAAhD,6BACKnD,EAAE3F,MAAM,UADb,aACK,EAAYO,YADjB,QACyB,YAEzB,eAACyI,EAAA,EAAD,CACIX,GAAI,CAAEyC,SAAU,SAAUC,GAAI,QAASC,GAAI,UAC3C/B,QAAQ,IACRH,UAAU,IAHd,uCAKWnD,EAAE3F,MAAM,UALnB,aAKW,EAAYoB,SAAShB,cALhC,QAK0C,EAL1C,YAOA,cAAC4I,EAAA,EAAD,CAAYC,QAAQ,IAAIC,cAAY,EAACJ,UAAU,IAAImC,MAAM,OAAzD,oCAGC,UAAAtF,EAAE3F,aAAF,eAASkL,QAAO,SAACnB,GAAD,OAAOA,EAAElE,KAAO,KAAGzF,QAAS,EACzC,cAAC4I,EAAA,EAAD,CACIX,GAAI,CAAEyC,SAAU,SAChB7B,QAAQ,IACRC,cAAY,EACZJ,UAAU,IACVmC,MAAM,OALV,kBAUAtF,EAAE3F,MACGkL,QAAO,SAACnB,EAAG5J,GAAJ,OAAgB,IAANA,GAAW4J,EAAElE,KAAO,KACrCnC,MAAM,EAAG,GACTZ,KAAI,SAACiH,GAAD,OACD,eAACf,EAAA,EAAD,CACIX,GAAI,CAAEyC,SAAU,SAChB7B,QAAQ,IACRC,cAAY,EACZJ,UAAU,IACVmC,MAAM,OALV,UAOKlB,EAAExJ,KAPP,UAOoBwJ,EAAE3I,SAAShB,OAP/B,yBAe5B,eAAC+K,EAAA,EAAD,CAAOxC,UAAU,WAAWN,GAAI,CAAE+C,OAAQ,mBAA1C,UACI,eAACC,EAAA,EAAD,CACIhD,GAAI,CACAmC,eAAgB,OAChBc,QAAS,OACThB,SAAU,OACViB,GAAI,MACJC,IAAK,OANb,UASI,eAAC3C,EAAA,EAAD,CAAKF,UAAU,MAAMN,GAAI,CAAEiD,QAAS,OAAQhB,SAAU,OAAQkB,IAAK,OAAnE,UACI,cAACxC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAAMT,GAAI,CAAEsC,SAAU,SAAzD,0CAGA,cAACc,EAAA,EAAD,CAAapD,GAAI,CAAEsC,SAAU,SAAW1B,QAAQ,WAAhD,SACI,cAACyC,EAAA,EAAD,CACI1B,MAAM,OACNT,SAAU,SAACC,GAAD,OACNhC,EAAqB,CAAEjH,KAAMiJ,EAAMM,OAAO1B,MAAOjB,SAAU,KAE/DiB,MAAOhB,EAAS7G,KALpB,SAOK4E,EAAKrC,KAAI,SAAC6C,EAAGxF,GAAJ,OACN,cAACwL,EAAA,EAAD,CAAUvD,MAAOjI,EAAjB,gBAAqBwF,QAArB,IAAqBA,OAArB,EAAqBA,EAAGxE,mBAKxC,eAAC0H,EAAA,EAAD,CAAKF,UAAU,MAAMN,GAAI,CAAEiD,QAAS,OAAQhB,SAAU,OAAQkB,IAAK,OAAnE,UACI,cAACxC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,MAAMT,GAAI,CAAEsC,SAAU,QAAzD,wBAGA,cAACc,EAAA,EAAD,CAAapD,GAAI,CAAEsC,SAAU,SAAW1B,QAAQ,WAAhD,SACI,cAACyC,EAAA,EAAD,CACI1B,MAAM,OACNT,SAAU,SAACC,GAAD,OAAWhC,EAAqB,CAAEL,SAAUqC,EAAMM,OAAO1B,SACnEA,MAAOhB,EAASD,SAHpB,mBAKKhC,EAAKiC,EAAS7G,aALnB,aAKK,EAAqBP,MACjBkL,QAAO,SAACnB,GAAD,OAAOA,EAAElE,KAAO,KACvBnC,MAAM,EAAG,GACTZ,KAAI,SAACiH,EAAG5J,GAAJ,OACD,cAACwL,EAAA,EAAD,CAAUvD,MAAOjI,EAAjB,SAAqB4J,EAAExJ,oBAM/C,cAACsI,EAAA,EAAD,CACIR,GAAI,CACA,oBAAqB,CACjB+C,OAAQ,OACR,+BAAgC,CAAEQ,UAAW,GAC7C,uDAAwD,CACpDzB,YAAa,gBAEjB,+BAAgC,CAAE0B,KAAM,QACxC,sEAAuE,CACnEjF,WAAY,UAV5B,SAeI,cAACkF,EAAA,EAAD,CAAUtD,KAAMA,EAAMd,QAASA,EAASqE,SAAU,GAAIC,UAAW,GAAIC,YAAU,kBCxO3GC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7a6a9a16.chunk.js","sourcesContent":["// Get Japanese Names\n// Description: Split full name into individual names then search Wikipedia for how they are spelled\n// Input:       [string] One or more names separated by whitespace (ex: John Doe)\n// Output:      [list] Objects containing #english articles, #japanese articles, and the names found\nasync function getJapaneseNames(fullName) {\n    const names = fullName.split(/\\s/)\n    const japaneseNames = []\n    for (let i = 0; i < names.length; i++) {\n        japaneseNames.push(await getJapaneseName(names[i]))\n    }\n    return japaneseNames\n}\n\n// Get Japanese Name\n// Description: Search Wikipedia for how the name is spelled in Japanese\n// Input:       [string] A name (ex: John)\n// Output:      [list] Object containing the name in Japanese, its frequency, total articles\n//              and a list of objects containing the titles and a snippet of articles\nasync function getJapaneseName(name) {\n    const articlesWithName = await searchWikipediaForName(name)\n    const articlesWithJapaneseTitles = await getJapaneseTitles(articlesWithName)\n    const japaneseNames = extractJapaneseNames(name, articlesWithJapaneseTitles) // [{name, article{ja, en, snippet}}]\n    const japaneseNamesFreq = getNameFrequency(japaneseNames) // [{name, freq, inArticles[{ja, en, snippet}]}]\n\n    return {\n        enCount: articlesWithName.length,\n        jaCount: Object.keys(articlesWithJapaneseTitles).length,\n        names: japaneseNamesFreq,\n        enName: name,\n    }\n}\n\n// Search Wikipedia For Name\n// Description: Search Wikipedia for articles with the name in the title\n// Input:       [string] A name (ex: John)\n// Output:      [list] A list of articles. Raw data from Wikipedia\nasync function searchWikipediaForName(name) {\n    const articles = []\n    // Fetch the first 500 synchronously to find out how many results there are,\n    const first500 = await fetchArticlesFromWikipedia(name, 0)\n    const totalArticles = first500.query.searchinfo.totalhits\n    // then get the rest asynchronously\n    const fetches = []\n    for (let offset = 500; offset < totalArticles && offset < 10000; offset += 500) {\n        fetches.push(fetchArticlesFromWikipedia(name, offset))\n    }\n    const results = await Promise.all(fetches)\n    results.concat([first500]).forEach((p) => articles.push(...p.query.search))\n    return articles\n}\n\n// Fetch articles From Wikipedia\n// Description: Get up to 500 articles from Wikipedia with the name in the title\n// Input:       [string] A name (ex: John)\n//              [integer] Offset\n// Output:      [list] A list of articles. Raw data from Wikipedia\nfunction fetchArticlesFromWikipedia(name, offset) {\n    return searchWikipedia({\n        list: 'search',\n        srlimit: 500,\n        srsearch: `intitle:${name}`,\n        sroffset: offset,\n    })\n}\n\n// Search Wikipedia\n// Description: Queries the Wikipedia API\n// Input:       [object] Search parameters\n// Output:      [object] Wikipedia response\nasync function searchWikipedia(searchParams) {\n    const config = { action: 'query', format: 'json', namespace: 0, ...searchParams }\n    const query = Object.entries(config)\n        .map((c) => c.join('='))\n        .join('&')\n    const url = `https://en.wikipedia.org/w/api.php?origin=*&${query}`\n    return await fetch(url).then((r) => r.json())\n}\n\n// Get Japanese Titles\n// Description: Search gets the Japanese titles of the wikipedia articles\n// Input:       [string] A name (ex: John)\n// Output:      [object] {pageid: {id, en, ja, snippet}, length}\nasync function getJapaneseTitles(articles) {\n    const pageids = articles.map((a) => a.pageid)\n    // Get Japanese titles\n    const promises = []\n    for (let i = 0; i < pageids.length; i += 50) {\n        promises.push(fetchLanguagesFromWikipedia(pageids.slice(i, i + 50).join('|'), 'ja'))\n    }\n    const results = await Promise.all(promises)\n    const pages = []\n    results.forEach((p) => pages.push(...Object.values(p.query.pages)))\n    // Get articles that have Japanese titles\n    const japaneseArticles = {}\n    pages.forEach((page) => {\n        if (page.langlinks) japaneseArticles[page.pageid] = { id: page.pageid, ja: page.langlinks[0]['*'] }\n    })\n    // Add English title and snippet\n    articles.forEach((article) => {\n        const page = japaneseArticles[article.pageid]\n        if (page) {\n            page.en = article.title\n            page.snippet = new DOMParser().parseFromString(article.snippet, 'text/html').body.textContent ?? ''\n        }\n    })\n    return japaneseArticles\n}\n\n// Fetch Languages From Wikipedia\n// Description: Gets alternative languages of list of articles\n// Input:       [string] A list of tittles separated by \"|\"\n//              [string] Language code (ex: ja)\n// Output:      [Object] Response from Wikipedia\nfunction fetchLanguagesFromWikipedia(pageids, langCodes) {\n    return searchWikipedia({\n        prop: 'langlinks',\n        lllimit: 500,\n        lllang: langCodes,\n        pageids,\n    })\n}\n\n// Extract Japanese Names\n// Description: Extracts the japanese names and creates a list\n// Input:       [object] Wikipedia articles\n// Output:      [array] Objects with name and articles\nfunction extractJapaneseNames(name, articles) {\n    name = name.toLowerCase()\n    const names = []\n    Object.values(articles).forEach((article) => {\n        const enNameIndex = article.en.toLowerCase().split(/\\s+/).indexOf(name)\n        const jaName = article.ja.split('・')[enNameIndex]\n        if (jaName) names.push({ name: jaName, article })\n    })\n    return names\n}\n\n// Get Name Frequency\n// Description: Finds out the frequency of each name\n// Input:       [{name, article}]\n// Output:      [{freq, name, articles}]\nfunction getNameFrequency(data) {\n    const names = data.map((e) => cleanName(e.name))\n    const freqs = getFrequency(names)\n    const articlesMap = {}\n    data.forEach((d) => {\n        const name = cleanName(d.name)\n        if (!articlesMap[name]) articlesMap[name] = []\n        articlesMap[name].push(d.article)\n    })\n    const freqList = Object.entries(freqs).map(([name, freq]) => ({ name, freq, articles: articlesMap[name] }))\n    freqList.sort((a, b) => b.freq - a.freq)\n    return freqList // [{freq, name, articles}]\n}\n\nfunction cleanName(name) {\n    return name\n        .replace(/\\(.*?\\)/g, '')\n        .replace(/\\s+/g, ' ')\n        .trim()\n}\n\n// Get Frequency\n// Description: Calculates frequency of items in array\n// Input:       [item1, item2, ...]\n// Output:      {item1: freq, ...}\nfunction getFrequency(arr) {\n    const freqs = {}\n    arr.forEach((v) => (freqs[v] = (freqs[v] ?? 0) + 1))\n    return freqs\n}\n\nexport default getJapaneseNames\n","import './App.css'\nimport * as React from 'react'\n// Material UI\nimport TextField from '@mui/material/TextField'\nimport Typography from '@mui/material/Typography'\nimport Card from '@mui/material/Card'\nimport Box from '@mui/material/Box'\nimport CardContent from '@mui/material/CardContent'\nimport Toolbar from '@mui/material/Toolbar'\nimport MenuItem from '@mui/material/MenuItem'\nimport FormControl from '@mui/material/FormControl'\nimport Select from '@mui/material/Select'\nimport Paper from '@mui/material/Paper'\nimport { DataGrid } from '@mui/x-data-grid'\nimport Link from '@mui/material/Link'\nimport Stack from '@mui/material/Stack'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\n// import { ThemeProvider, createTheme } from '@mui/system'\n// My stuffs\nimport getJapaneseNames from './yourname'\nimport { Container } from '@mui/material'\n\nconst default_data = [\n    { names: [{ name: 'Your', freq: 1, articles: [] }] },\n    { names: [{ name: 'Name', freq: 1, articles: [] }] },\n]\n\nconst theme = createTheme({\n    palette: {\n        primary: { main: '#000', accent: 'hsl(300, 20%, 50%)', link: 'hsl(300, 60%, 40%)' },\n        secondary: { main: '#fff' },\n        background: {\n            main: '#999',\n            paper: '#999',\n            dark: '#888',\n            separators: '#666',\n        },\n    },\n})\n\nfunction App() {\n    const [data, setData] = React.useState(default_data) // Data about names\n    const [selected, setSelected] = React.useState({ name: '', spelling: '' }) // Keep track of what data is selected for the table\n\n    // Wait until user stops typing then initiate processing\n    const processInputAfterMs = 500\n    let timeout = 0\n    let lastInput = 0\n    function handleInputChange(event) {\n        if ((event.timeStamp - lastInput) / 1000 < processInputAfterMs / 100) {\n            clearTimeout(timeout)\n            timeout = setTimeout(async () => {\n                const dataPromise = getJapaneseNames(event.target.value)\n                setData(\n                    event.target.value\n                        .split(/\\s/)\n                        .map((n) => ({ names: [{ name: 'Loading...', freq: 0, articles: [] }] })),\n                ) // Set data to show 'Loading...' on the cards while fetching\n                const data = await dataPromise\n                setData(data)\n                setSelected({ name: 0, spelling: 0 })\n            }, processInputAfterMs)\n        }\n        lastInput = event.timeStamp\n    }\n\n    // Upadate selected variable with new data\n    const handleSelectedChange = (update) => {\n        setSelected({ ...selected, ...update })\n    }\n\n    // Column template for table\n    const columns = [\n        { field: 'id', headerName: '#', flex: 0, width: 60 },\n        { field: 'ja', headerName: 'Japanese', flex: 1 },\n        { field: 'en', headerName: 'English', flex: 1 },\n        {\n            field: 'link',\n            headerName: 'Wikipedia',\n            flex: 0,\n            sortable: false,\n            renderCell: (params) => (\n                <Link\n                    href={`https://en.wikipedia.org/?curid=${params.value}`}\n                    sx={{ color: 'primary.link', textDecorationColor: 'hsl(300, 60%, 40%)' }}\n                >\n                    Link\n                </Link>\n            ),\n        },\n    ]\n\n    // The data for the table\n    const rows =\n        data[selected.name || 0].names[selected.spelling || 0]?.articles.map((r, i) => ({\n            ...r,\n            id: i + 1,\n            link: r.id,\n        })) ?? {}\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container className='App' sx={{ textAlign: 'center' }}>\n                <Box component='header' sx={{ pt: '1em', color: 'secondary.main' }}>\n                    <Typography variant='h3' gutterBottom component='h1'>\n                        Your Name In Japanese\n                    </Typography>\n                </Box>\n                <Container component='section' style={{ maxWidth: '1024px' }}>\n                    <TextField\n                        className='search'\n                        fullWidth\n                        onChange={handleInputChange}\n                        label='Your name'\n                        placeholder='John Doe'\n                        color='secondary'\n                        sx={{\n                            '.MuiOutlinedInput-root': { backgroundColor: 'background.main' },\n                            '.MuiInputLabel-shrink': { color: 'secondary.main' },\n                            '&:is(*, :hover) .MuiOutlinedInput-notchedOutline': { borderColor: 'secondary.main' },\n                        }}\n                    />\n                    <Stack\n                        sx={{ my: '1em', flexWrap: 'wrap' }}\n                        direction='row'\n                        justifyContent='space-evenly'\n                        alignItems='flex-start'\n                    >\n                        {data.map((d) => (\n                            <Card sx={{ minWidth: '15em', backgroundColor: 'primary.accent', m: '5px' }}>\n                                <CardContent>\n                                    <Typography variant='h5' gutterBottom component='h5'>\n                                        {d.names[0]?.name ?? 'Unknown'}\n                                    </Typography>\n                                    <Typography\n                                        sx={{ fontSize: '0.75em', mb: '0.5em', mt: '-0.5em' }}\n                                        variant='p'\n                                        component='p'\n                                    >\n                                        Found {d.names[0]?.articles.length ?? 0} times\n                                    </Typography>\n                                    <Typography variant='p' gutterBottom component='p' align='left'>\n                                        Alternatives include:\n                                    </Typography>\n                                    {d.names?.filter((n) => n.freq > 1).length < 2 ? (\n                                        <Typography\n                                            sx={{ fontSize: '0.8em' }}\n                                            variant='p'\n                                            gutterBottom\n                                            component='p'\n                                            align='left'\n                                        >\n                                            None\n                                        </Typography>\n                                    ) : (\n                                        d.names\n                                            .filter((n, i) => i !== 0 && n.freq > 1)\n                                            .slice(0, 3)\n                                            .map((n) => (\n                                                <Typography\n                                                    sx={{ fontSize: '0.8em' }}\n                                                    variant='p'\n                                                    gutterBottom\n                                                    component='p'\n                                                    align='left'\n                                                >\n                                                    {n.name} found {n.articles.length} times\n                                                </Typography>\n                                            ))\n                                    )}\n                                </CardContent>\n                            </Card>\n                        ))}\n                    </Stack>\n                    <Paper className='articles' sx={{ border: '1px solid white' }}>\n                        <Toolbar\n                            sx={{\n                                justifyContent: 'left',\n                                display: 'flex',\n                                flexWrap: 'wrap',\n                                py: '5px',\n                                gap: '1em',\n                            }}\n                        >\n                            <Box className='row' sx={{ display: 'flex', flexWrap: 'wrap', gap: '1em' }}>\n                                <Typography variant='h6' component='div' sx={{ minWidth: '260px' }}>\n                                    Show Wikipedia articles with\n                                </Typography>\n                                <FormControl sx={{ minWidth: '100px' }} variant='standard'>\n                                    <Select\n                                        label='Name'\n                                        onChange={(event) =>\n                                            handleSelectedChange({ name: event.target.value, spelling: 0 })\n                                        }\n                                        value={selected.name}\n                                    >\n                                        {data.map((d, i) => (\n                                            <MenuItem value={i}>{d?.enName}</MenuItem>\n                                        ))}\n                                    </Select>\n                                </FormControl>\n                            </Box>\n                            <Box className='row' sx={{ display: 'flex', flexWrap: 'wrap', gap: '1em' }}>\n                                <Typography variant='h6' component='div' sx={{ minWidth: '90px' }}>\n                                    written as\n                                </Typography>\n                                <FormControl sx={{ minWidth: '100px' }} variant='standard'>\n                                    <Select\n                                        label='Name'\n                                        onChange={(event) => handleSelectedChange({ spelling: event.target.value })}\n                                        value={selected.spelling}\n                                    >\n                                        {data[selected.name]?.names\n                                            .filter((n) => n.freq > 1)\n                                            .slice(0, 4)\n                                            .map((n, i) => (\n                                                <MenuItem value={i}>{n.name}</MenuItem>\n                                            ))}\n                                    </Select>\n                                </FormControl>\n                            </Box>\n                        </Toolbar>\n                        <Box\n                            sx={{\n                                '.MuiDataGrid-root': {\n                                    border: 'none',\n                                    '& .MuiDataGrid-columnHeaders': { borderTop: 1 },\n                                    '& :is(.MuiDataGrid-cell, .MuiDataGrid-columnHeaders)': {\n                                        borderColor: 'primary.main',\n                                    },\n                                    '& .MuiDataGrid-iconSeparator': { fill: '#666' },\n                                    '& :is(.MuiDataGrid-columnHeaders, .MuiDataGrid-row:nth-child(2n-2))': {\n                                        background: '#888',\n                                    },\n                                },\n                            }}\n                        >\n                            <DataGrid rows={rows} columns={columns} pageSize={10} rowHeight={38} autoHeight />\n                        </Box>\n                    </Paper>\n                </Container>\n            </Container>\n        </ThemeProvider>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n"],"sourceRoot":""}